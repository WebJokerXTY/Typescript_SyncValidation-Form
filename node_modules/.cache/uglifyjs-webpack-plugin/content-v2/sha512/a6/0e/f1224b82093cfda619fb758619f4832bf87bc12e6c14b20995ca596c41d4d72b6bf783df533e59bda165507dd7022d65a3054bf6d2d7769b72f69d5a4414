{"map":"{\"version\":3,\"sources\":[\"/home/tianyu/tsprogram/src/index.tsx\",\"/home/tianyu/tsprogram/src/Form.tsx\"],\"names\":[\"React\",\"__webpack_require__\",\"ReactDOM\",\"styles_1\",\"react_redux_1\",\"store_1\",\"showResults_1\",\"Form_1\",\"render\",\"createElement\",\"Provider\",\"store\",\"MuiThemeProvider\",\"theme\",\"createMuiTheme\",\"style\",\"padding\",\"Form\",\"onSubmit\",\"showResults\",\"document\",\"getElementById\",\"core_1\",\"core_2\",\"redux_form_1\",\"renderField\",\"field\",\"TextField\",\"Object\",\"assign\",\"hintText\",\"label\",\"floatingLabelText\",\"errorText\",\"meta\",\"touched\",\"error\",\"input\",\"custom\",\"exports\",\"reduxForm\",\"form\",\"validate\",\"values\",\"errors\",\"forEach\",\"email\",\"test\",\"Component\",\"[object Object]\",\"handleSubmit\",\"pristine\",\"reset\",\"submitting\",\"this\",\"props\",\"Field\",\"name\",\"component\",\"Button\",\"type\",\"disabled\",\"onClick\"],\"mappings\":\"sGAAA,MAAAA,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,IACAI,EAAAJ,EAAA,KACAK,EAAAL,EAAA,KACAM,EAAAN,EAAA,KAEAC,EAASM,OACLR,EAAAS,cAACL,EAAAM,UAASC,MAAON,EAAAM,OACbX,EAAAS,cAACN,EAAAS,kBAAiBC,MAASV,EAAAW,kBACvBd,EAAAS,cAAA,OAAKM,OAASC,QAAS,KACnBhB,EAAAS,cAAA,KAAA,KAAA,mBACAT,EAAAS,cAACF,EAAAU,MAAKC,SAAUZ,EAAAa,iBAI5BC,SAASC,eAAe,4FCjB5B,MAAArB,EAAAC,EAAA,GACAqB,EAAArB,EAAA,KACAsB,EAAAtB,EAAA,KACAuB,EAAAvB,EAAA,KAqCMwB,EAAcC,GAChB1B,EAAAS,cAACa,EAAAK,UAASC,OAAAC,QACNC,SAAYJ,EAAMK,MAClBC,kBAAqBN,EAAMK,MAC3BE,UAAaP,EAAMQ,KAAKC,SAAWT,EAAMQ,KAAKE,OAC1CV,EAAMW,MACNX,EAAMY,SAwBLC,EAAAtB,KAAOO,EAAAgB,WAChBC,KAAM,OACNC,SA9DcC,IACd,MAAMC,KAgBR,OAdE,OACA,SAEaC,QAAQnB,IAChBiB,EAAOjB,KACVkB,EAAOlB,GAAS,cAIlBiB,EAAOG,QACN,4CAA4CC,KAAKJ,EAAOG,SAEzDF,EAAOE,MAAQ,yBAEVF,IA2CWpB,eApBQxB,EAAMgD,UAC9BC,SACI,MAAMC,aAAEA,EAAYC,SAAEA,EAAQC,MAAEA,EAAKC,WAAEA,GAAeC,KAAKC,MAC3D,OACIvD,EAAAS,cAAA,QAAMS,SAAYgC,GACdlD,EAAAS,cAAA,MAAA,KACIT,EAAAS,cAACe,EAAAgC,OAAMC,KAAO,OAAOC,UAAajC,EAAaM,MAAQ,UAE3D/B,EAAAS,cAAA,MAAA,KACIT,EAAAS,cAACe,EAAAgC,OAAMC,KAAO,QAAQC,UAAajC,EAAaM,MAAQ,WAE5D/B,EAAAS,cAAA,MAAA,KACIT,EAAAS,cAACc,EAAAoC,QAAOC,KAAO,SAASC,SAAYR,GAAU,UAC9CrD,EAAAS,cAACc,EAAAoC,QAAOC,KAAO,SAASC,SAAYV,GAAYE,EAAYS,QAAWV,GAAK\",\"sourcesContent\":[\"import * as React from \\\"react\\\";\\nimport * as ReactDOM from \\\"react-dom\\\";\\nimport { MuiThemeProvider, createMuiTheme } from \\\"@material-ui/core/styles\\\"\\nimport { Provider } from \\\"react-redux\\\";\\nimport { store } from \\\"./store\\\";\\nimport { showResults } from \\\"./showResults\\\";\\nimport { Form } from \\\"./Form\\\";\\n\\nReactDOM.render(\\n    <Provider store={store}>\\n        <MuiThemeProvider theme = {createMuiTheme()}>\\n            <div style={{ padding: 15 }}>\\n                <h2>Typescript Form</h2>\\n                <Form onSubmit={showResults} />\\n            </div>\\n        </MuiThemeProvider>\\n    </Provider>,\\n    document.getElementById(\\\"root\\\")\\n);\",\"import * as React from 'react';\\nimport { TextField } from '@material-ui/core';\\nimport { Button } from '@material-ui/core';\\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\\n\\nexport interface FormData {\\n    name: string;\\n    email: string;\\n}\\n\\nconst validate = (values: any) => {\\n    const errors:any = {};\\n  const requiredFields = [\\n    'name',\\n    'email',\\n  ];\\n  requiredFields.forEach(field => {\\n    if (!values[field]) {\\n      errors[field] = 'Required';\\n    }\\n  });\\n  if (\\n    values.email &&\\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i.test(values.email)\\n  ) {\\n    errors.email = 'Invalid email address';\\n  }\\n  return errors;\\n}\\n\\nconst warn = (values: FormData) => {\\n    const warnings = {\\n        name: ''\\n    }\\n    if(values.name && values.name.length > 10) {\\n        warnings.name = 'May be too long for you to remember'\\n    }\\n    return warnings\\n}\\n\\nconst renderField= (field: any) => (\\n    <TextField\\n        hintText = {field.label}\\n        floatingLabelText = {field.label}\\n        errorText = {field.meta.touched && field.meta.error}\\n        {...field.input}\\n        {...field.custom}\\n    />\\n)\\n\\nclass FormComponent extends React.Component<InjectedFormProps<FormData, {}, string>, any> {\\n    render() {\\n        const { handleSubmit, pristine, reset, submitting } = this.props;\\n        return(\\n            <form onSubmit = {handleSubmit}>\\n                <div>\\n                    <Field name = \\\"name\\\" component = {renderField} label = \\\"Name\\\" />\\n                </div>\\n                <div>\\n                    <Field name = \\\"email\\\" component = {renderField} label = \\\"Email\\\" />\\n                </div>\\n                <div>\\n                    <Button type = \\\"submit\\\" disabled = {submitting}>Submit</Button>\\n                    <Button type = \\\"button\\\" disabled = {pristine || submitting} onClick = {reset}>Clear Values</Button>\\n                </div>\\n            </form>\\n        )\\n    }\\n}\\n\\nexport const Form = reduxForm({\\n    form: 'test',\\n    validate,\\n    //warn\\n})(FormComponent);\"]}","code":"webpackHotUpdate(0,{236:function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const l=n(2),r=n(18),a=n(24),m=n(20),i=n(292),o=n(293),c=n(294);r.render(l.createElement(m.Provider,{store:i.store},l.createElement(a.MuiThemeProvider,{theme:a.createMuiTheme()},l.createElement(\"div\",{style:{padding:15}},l.createElement(\"h2\",null,\"Typescript Form\"),l.createElement(c.Form,{onSubmit:o.showResults})))),document.getElementById(\"root\"))},294:function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const l=n(2),r=n(127),a=n(127),m=n(208),i=e=>l.createElement(r.TextField,Object.assign({hintText:e.label,floatingLabelText:e.label,errorText:e.meta.touched&&e.meta.error},e.input,e.custom));t.Form=m.reduxForm({form:\"test\",validate:e=>{const t={};return[\"name\",\"email\"].forEach(n=>{e[n]||(t[n]=\"Required\")}),e.email&&!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(e.email)&&(t.email=\"Invalid email address\"),t}})(class extends l.Component{render(){const{handleSubmit:e,pristine:t,reset:n,submitting:r}=this.props;return l.createElement(\"form\",{onSubmit:e},l.createElement(\"div\",null,l.createElement(m.Field,{name:\"name\",component:i,label:\"Name\"})),l.createElement(\"div\",null,l.createElement(m.Field,{name:\"email\",component:i,label:\"Email\"})),l.createElement(\"div\",null,l.createElement(a.Button,{type:\"submit\",disabled:r},\"Submit\"),l.createElement(a.Button,{type:\"button\",disabled:t||r,onClick:n},\"Clear Values\")))}})}});","extractedComments":[]}